// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function first(decoder, json) {
  var decoded = Json_decode.list(decoder, json);
  var match = Belt_List.get(decoded, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    throw [
          Json_decode.DecodeError,
          "Expected at least one element in list but got" + json
        ];
  }
}

function boolFromQuery(json) {
  var match = Json_decode.string(json);
  switch (match) {
    case "0" : 
    case "false" : 
        return false;
    case "" : 
    case "1" : 
    case "true" : 
    case "yes" : 
        return true;
    default:
      return false;
  }
}

function stringArrayFromQuery(json) {
  return Json_decode.string(json).split(",");
}

function base64(json) {
  return Buffer.from(Json_decode.string(json), "base64");
}

function buffer(json) {
  var isBuffer = (json instanceof Buffer);
  if (isBuffer) {
    return json;
  } else {
    throw [
          Json_decode.DecodeError,
          "Expected a buffer, but got " + Belt_Option.getExn(Caml_option.undefined_to_opt(JSON.stringify(json)))
        ];
  }
}

function maybeFirst(decoder, json) {
  return Json_decode.map((function (arr) {
                var match = Belt_Array.get(arr, 0);
                if (match !== undefined) {
                  return Caml_option.some(Curry._1(decoder, Caml_option.valFromOption(match)));
                }
                
              }), (function (param) {
                return Json_decode.array((function (a) {
                              return a;
                            }), param);
              }), json);
}

function bigint(json) {
  return Json_decode.oneOf(/* :: */[
              Json_decode.$$float,
              /* :: */[
                (function (param) {
                    return Json_decode.map(Caml_format.caml_float_of_string, Json_decode.string, param);
                  }),
                /* [] */0
              ]
            ], json);
}

function decode(decoder, json) {
  try {
    return Curry._1(decoder, json);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return Js_exn.raiseError(exn[1]);
    } else {
      throw exn;
    }
  }
}

exports.first = first;
exports.boolFromQuery = boolFromQuery;
exports.stringArrayFromQuery = stringArrayFromQuery;
exports.base64 = base64;
exports.buffer = buffer;
exports.maybeFirst = maybeFirst;
exports.bigint = bigint;
exports.decode = decode;
/* No side effect */
