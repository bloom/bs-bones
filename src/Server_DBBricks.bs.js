// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Lodash = require("lodash");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var SqlBricksPostgres = require("sql-bricks-postgres");

var Types = /* module */[];

var Utils = /* module */[];

var Raw = /* module */[];

var Where = /* module */[];

function value(builder, v) {
  return builder.values(Lodash.omitBy(v, Js_undefined.testAny));
}

function anyValue(builder, v) {
  return builder.values(v);
}

function valueJson(builder, v) {
  return builder.values(Lodash.omitBy(v, Js_undefined.testAny));
}

var Insert = /* module */[
  /* value */value,
  /* anyValue */anyValue,
  /* valueJson */valueJson
];

function update(table, obj) {
  return SqlBricksPostgres.update(table, Lodash.omitBy(obj, Js_undefined.testAny));
}

function updateJson(table, json) {
  return SqlBricksPostgres.update(table, Lodash.omitBy(json, Js_undefined.testAny));
}

var Update = /* module */[
  /* update */update,
  /* updateJson */updateJson
];

var Delete = /* module */[];

var Select = /* module */[];

function whereOpt(builder, optExpr) {
  if (optExpr !== undefined) {
    return builder.where(Caml_option.valFromOption(optExpr));
  } else {
    return builder;
  }
}

var Filters = /* module */[/* whereOpt */whereOpt];

var Transformers = /* module */[];

var OnConflict = /* module */[];

var To = /* module */[];

exports.Types = Types;
exports.Utils = Utils;
exports.Raw = Raw;
exports.Where = Where;
exports.Insert = Insert;
exports.value = value;
exports.anyValue = anyValue;
exports.valueJson = valueJson;
exports.Update = Update;
exports.update = update;
exports.updateJson = updateJson;
exports.Delete = Delete;
exports.Select = Select;
exports.Filters = Filters;
exports.whereOpt = whereOpt;
exports.Transformers = Transformers;
exports.OnConflict = OnConflict;
exports.To = To;
/* lodash Not a pure module */
