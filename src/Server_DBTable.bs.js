// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Prom = require("bs-prom/src/Prom.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Server_Log = require("./Server_Log.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Server_Decode = require("./Server_Decode.bs.js");
var Server_DBBricks = require("./Server_DBBricks.bs.js");
var Server_DBAbstract = require("./Server_DBAbstract.bs.js");
var SqlBricksPostgres = require("sql-bricks-postgres");

function getPgPath(path) {
  return "{" + (Belt_List.toArray(path).join(",") + "}");
}

function getStack(param) {
  var error = (new Error());
  return Belt_Option.getWithDefault(error.stack, "No trace could be provided");
}

var Utils = /* module */[
  /* getPgPath */getPgPath,
  /* getStack */getStack
];

function Table(CFG) {
  var select = function (columns) {
    return SqlBricksPostgres.select(columns).from(CFG[/* name */0]);
  };
  var selectIn = function (column, path) {
    return SqlBricksPostgres.select(column + ("#>" + getPgPath(path))).from(CFG[/* name */0]);
  };
  var update = function (vs) {
    return Server_DBBricks.update(CFG[/* name */0], vs);
  };
  var updateJson = function (vs) {
    return Server_DBBricks.updateJson(CFG[/* name */0], vs);
  };
  var setIn = function (column, path, value) {
    return SqlBricksPostgres.updateTableOnly(CFG[/* name */0]).set(column, SqlBricksPostgres("jsonb_set($1, $2, $3)", /* tuple */[
                    column,
                    getPgPath(path),
                    value
                  ]));
  };
  var _insert = function (vs) {
    return Server_DBBricks.anyValue(SqlBricksPostgres.insertInto(CFG[/* name */0]), vs);
  };
  var _upsert = function (vs) {
    return Server_DBBricks.anyValue(SqlBricksPostgres.insertInto(CFG[/* name */0]), vs).onConflict("id").doUpdate();
  };
  var $$delete = function (param) {
    return SqlBricksPostgres.delete().from(CFG[/* name */0]);
  };
  var perform = function (builder, decoder) {
    return Prom.Infix[/* <!> */2](Prom.Infix[/* <$> */0](Prom.Infix[/* <!> */2](Server_DBAbstract.perform(CFG[/* pool */1], builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(/* () */0), err);
                        })), (function (param) {
                      return Server_Decode.decode(decoder, param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(/* () */0), err);
                }));
  };
  var maybeOne = function (builder, decoder) {
    return Prom.Infix[/* <!> */2](Prom.Infix[/* <$> */0](Prom.Infix[/* <!> */2](Server_DBAbstract.perform(CFG[/* pool */1], builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(/* () */0), err);
                        })), (function (param) {
                      return Server_Decode.decode((function (param) {
                                    return Server_Decode.maybeFirst(decoder, param);
                                  }), param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(/* () */0), err);
                }));
  };
  var one = function (builder, decoder) {
    return Prom.Infix[/* <!> */2](Prom.Infix[/* <$> */0](Prom.Infix[/* <!> */2](Server_DBAbstract.perform(CFG[/* pool */1], builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(/* () */0), err);
                        })), (function (param) {
                      return Server_Decode.decode((function (param) {
                                    return Server_Decode.first(decoder, param);
                                  }), param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(/* () */0), err);
                }));
  };
  return /* module */[
          /* Bricks */0,
          /* whereOpt */Server_DBBricks.Filters[0],
          /* select */select,
          /* selectIn */selectIn,
          /* update */update,
          /* updateJson */updateJson,
          /* setIn */setIn,
          /* _insert */_insert,
          /* insert */_insert,
          /* insertJson */_insert,
          /* _upsert */_upsert,
          /* upsert */_upsert,
          /* upsertJson */_upsert,
          /* delete */$$delete,
          /* perform */perform,
          /* maybeOne */maybeOne,
          /* one */one
        ];
}

exports.Utils = Utils;
exports.Table = Table;
/* Server_Log Not a pure module */
